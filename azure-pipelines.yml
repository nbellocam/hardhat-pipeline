trigger:
  branches:
    include:
    - main

pool:
  vmImage: ubuntu-latest


steps:
- task: NodeTool@0
  inputs:
    versionSpec: '14.x'
  displayName: 'Install Node.js'

- script: |
    npm ci --also=dev
  displayName: 'Install dependencies'

# Linting
########################

- script: |
    npm run lint > linter-log.txt 2>&1
    if [ $? -ne 0 ]; then
      echo "##vso[task.setvariable variable=linterLog]$(cat linter-log.txt | sed '1,/> eslint ./d;/npm ERR!/,$d' | sed '/./,$!d' | sed ':a;N;$!ba;s/\n/%0D%0A/g')"
    fi
  continueOnError: true
  displayName: 'Run Linter'

- task: GitHubComment@0
  condition: and(eq(variables['Build.Reason'], 'PullRequest'), failed())
  inputs:
    gitHubConnection: 'myGitHubConnection'
    repositoryName: '$(Build.Repository.Name)'
    comment: |
      **Linter Error Details:**
      ```
      $(linterLog)
      ```

# Building the project
########################

- script: |
    npm run compile
  displayName: 'Compile contracts'


# Security Audit tasks
########################

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true
    architecture: 'x64'
  displayName: 'Install Python'

- script: |
    python -m pip install --upgrade pip
    pip3 install slither-analyzer solc-select
    solc-select install 0.6.11
    solc-select use 0.6.11
  displayName: 'Install dependencies'

- script: |
    slither . --ignore-compile --filter-paths "node_modules" --disable-color --print human-summary > slither-audit.txt 2>&1
    
    echo "##vso[task.setvariable variable=slitherAuditRun]yes";

    export LError=$(grep 'low issues' slither-audit.txt | sed 's/[a-zA-Z:0 ]//g')
    export MError=$(grep 'medium issues' slither-audit.txt | sed 's/[a-zA-Z:0 ]//g')
    export HError=$(grep 'high issues' slither-audit.txt | sed 's/[a-zA-Z:0 ]//g')
    
    echo -en '-------------------------------\n\n\n# Details:\n##############################\n\n' >> slither-audit.txt
    slither . --ignore-compile --filter-paths "node_modules" --disable-color >> slither-audit.txt 2>&1

    if [ ! -z "${LError}" ] || [ ! -z "${MError}" ] || [ ! -z "${HError}" ] ; then 
      echo "##vso[task.complete result=Failed;]Slither found a issue." ;
    fi

    echo "##vso[task.setvariable variable=slitherAudit]$(cat slither-audit.txt | sed ':a;N;$!ba;s/\n/%0D%0A/g')"
  displayName: 'Run slither audit'

- task: GitHubComment@0
  condition: and(eq(variables['Build.Reason'], 'PullRequest'), failed(), eq(variables.slitherAuditRun,'yes'))
  inputs:
    gitHubConnection: 'myGitHubConnection'
    repositoryName: '$(Build.Repository.Name)'
    comment: |
      **Slither audit result:**

      ```
      $(securityAudit)
      ```

- task: CopyFiles@2
  condition: and(succeededOrFailed(), eq(variables.slitherAuditRun,'yes'))
  inputs:
    contents: 'slither-audit.txt'
    targetFolder: $(Build.ArtifactStagingDirectory)
    flattenFolders: true

- task: PublishBuildArtifacts@1
  condition: and(succeededOrFailed(), eq(variables.slitherAuditRun,'yes'))
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'slither-audit'


# Testing and coverage tasks
##############################
- script: |
    npm run coverage
  displayName: 'Run tests and coverage'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: coverage/cobertura-coverage.xml
